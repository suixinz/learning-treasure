//给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。
//
//字母区分大小写，因此 "a" 和 "A" 是不同类型的石头。
//
//作者：力扣(LeetCode)
//链接：https://leetcode.cn/leetbook/read/hash-table/xx2a0c/
//来源：力扣（LeetCode）
//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

#include <stdlib.h>
#include <uthash.h>

//Part1 self
//执行用时：4 ms, 在所有 C 提交中击败了36.16 %的用户
//内存消耗：5.7 MB, 在所有 C 提交中击败了5.21 %的用户
//通过测试用例：255 / 255
typedef struct ch_bkt {
	char ch;
	UT_hash_handle hh;
}ch_bkt;

int numJewelsInStones(char* jewels, char* stones) {
	ch_bkt* jw = NULL;
	char* p = jewels;
	while (*p)
	{
		ch_bkt* tecb = (ch_bkt*)malloc(sizeof(ch_bkt));
		tecb->ch = *p;
		HASH_ADD(hh, jw, ch, sizeof(char), tecb);
		++p;
	}
	char* sp = stones;
	int count = 0;
	while (*sp)
	{
		ch_bkt* fcb = NULL;
		HASH_FIND(hh, jw, sp, sizeof(char), fcb);
		if (fcb) {
			count++;
		}
		++sp;
	}
	return count;
}


//Part2 数组解法（直接写一个映射就可以了）
//执行用时：0 ms, 在所有 C 提交中击败了100.00 %的用户
//内存消耗：5.5 MB, 在所有 C 提交中击败了27.40 %的用户
//通过测试用例：255 / 255
int numJewelsInStones(char* jewels, char* stones) {
	int map[58] = { 0 };
	while (*jewels)
	{
		map[*jewels - 'A'] = 1;
		++jewels;
	}
	int count = 0;
	while (*stones)
	{
		if (map[*stones - 'A']) {
			++count;
		}
		++stones;
	}
	return count;
}

//Part3 对Part2进行优化，可以使用布尔型标志数组；
//执行用时：0 ms, 在所有 C 提交中击败了100.00 %的用户
//内存消耗：5.4 MB, 在所有 C 提交中击败了60.82 %的用户
//通过测试用例：255 / 255
int numJewelsInStones(char* jewels, char* stones) {
	bool map[58] = { 0 };
	while (*jewels)
	{
		map[*jewels - 'A'] = 1;
		++jewels;
	}
	int count = 0;
	while (*stones)
	{
		if (map[*stones - 'A']) {
			++count;
		}
		++stones;
	}
	return count;
}
